name: CI/CD - FastAPI

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  # --- Job 1: Build and push SHA-tagged image ---
  build-and-push-sha:
    name: Build & Push SHA Image
    runs-on: ubuntu-latest
    outputs:
      sha_tag: ${{ steps.set-sha.outputs.sha_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: set-sha
        name: Set SHA tag
        run: |
          SHA_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "sha_tag=$SHA_TAG" >> "$GITHUB_OUTPUT"
          echo "SHA_TAG=$SHA_TAG" >> "$GITHUB_ENV"

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/does-not-compile/portfolio-chatbot:${{ steps.set-sha.outputs.sha_tag }} .

      - name: Push SHA image
        run: |
          docker push ghcr.io/does-not-compile/portfolio-chatbot:${{ steps.set-sha.outputs.sha_tag }}

  # --- Job 2: Deploy SHA to EC2 ---
  deploy-to-ec2:
    name: Deploy SHA to EC2
    needs: build-and-push-sha
    runs-on: ubuntu-latest
    env:
      SHA_TAG: ${{ needs.build-and-push-sha.outputs.sha_tag }}
    steps:
      - name: SSH & Deploy FastAPI container via Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: SHA_TAG
          script: |
            set -euo pipefail
            cd /home/ubuntu/app

            echo "SHA_TAG is '$SHA_TAG'"
            echo "Pulling new image for SHA: $SHA_TAG..."
            docker pull ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG

            # --- Start temporary canary container ---
            CANARY_NAME="fastapi-canary"
            docker rm -f "$CANARY_NAME" || true
            docker run -d --name "$CANARY_NAME" \
              --network app_proxy \
              --network app_internal \
              --env-file .env \
              ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG \
              uvicorn main:app --host 0.0.0.0 --port 8000 --proxy-headers --forwarded-allow-ips '*'

            # --- Wait for Docker health check ---
            echo "Waiting for FastAPI canary to become healthy..."
            HEALTH_OK=0
            for i in $(seq 1 20); do
              STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$CANARY_NAME" 2>/dev/null || echo "none")
              if [ "$STATUS" = "healthy" ]; then
                HEALTH_OK=1
                echo "✅ FastAPI canary is healthy!"
                break
              fi
              sleep 3
            done

            if [ "$HEALTH_OK" -eq 1 ]; then
              echo "Promoting image to local stable..."
              docker tag ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG ghcr.io/does-not-compile/portfolio-chatbot:stable

              echo "Updating override file with SHA $SHA_TAG..."
              printf '%s\n' 'version: "3.9"' 'services:' '  fastapi:' "    image: ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG" > docker-compose.override.yml

              echo "Stopping existing fastapi container (if any)..."
              docker-compose stop fastapi || true
              docker-compose rm -f fastapi || true

              echo "Deploying FastAPI with new stable image..."
              docker-compose up -d fastapi

              echo "Cleaning up canary container..."
              docker rm -f "$CANARY_NAME" || true
              docker image prune -f

              echo "✅ Deployment successful!"
              exit 0
            else
              echo "❌ FastAPI canary failed health check, rolling back..."
              docker rm -f "$CANARY_NAME" || true
              docker-compose up -d fastapi
              docker image prune -f
              exit 1
            fi
    outputs:
      deploy_sha: ${{ needs.build-and-push-sha.outputs.sha_tag }}

  # --- Job 3: Promote SHA to stable in GHCR (runs only if deploy succeeded) ---
  promote-to-stable:
    name: Promote SHA to GHCR Stable
    needs: deploy-to-ec2
    if: success()   # only runs if deploy succeeded
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}  # Personal Access Token with write:packages

      - name: Tag & Push stable
        run: |
          SHA_TAG=${{ needs.deploy-to-ec2.outputs.deploy_sha }}
          echo "Promoting SHA $SHA_TAG to stable in GHCR..."
          # Pull the SHA-tagged image (ensures it's local)
          docker pull ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG
          # Tag it as stable
          docker tag ghcr.io/does-not-compile/portfolio-chatbot:$SHA_TAG ghcr.io/does-not-compile/portfolio-chatbot:stable
          # Push stable to GHCR
          docker push ghcr.io/does-not-compile/portfolio-chatbot:stable
